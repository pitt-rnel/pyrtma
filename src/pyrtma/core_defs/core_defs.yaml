# core_defs.yaml

compiler_options:
  IMPORT_COREDEFS: false

imports:
  - data_logger.yaml # MTs 62-79, 87-89
  - quick_logger.yaml # MTs 54-61, 96

constants:
  MAX_MODULES: 200
  DYN_MOD_ID_START: 100
  MAX_HOSTS: 5
  MAX_MESSAGE_TYPES: 10000
  MAX_RTMA_MSG_TYPE: 99
  MAX_RTMA_MODULE_ID: 9
  MAX_CONTIGUOUS_MESSAGE_DATA: 9000
  ALL_MESSAGE_TYPES: 0x7FFFFFFF
  MAX_ACTIVE_CLIENTS: 256
  MAX_SUBSCRIBERS: 256
  MAX_SUBS: 256
  MAX_NAME_LEN: 32
  MAX_LOG_LENGTH: 1024
  MESSAGE_TRAFFIC_SIZE: 64
  MAX_MESSAGE_SIZE: 65535


string_constants: null

aliases:
  MODULE_ID: int16
  HOST_ID: int16
  MSG_TYPE: int32
  MSG_COUNT: int32

host_ids:
  LOCAL_HOST: 0
  ALL_HOSTS: 0x7FFF

module_ids:
  MESSAGE_MANAGER: 0
  DATA_LOGGER: 4
  QUICK_LOGGER: 5

struct_defs:
  RTMA_MSG_HEADER:
    fields:
      msg_type: MSG_TYPE
      msg_count: MSG_COUNT
      send_time: double
      recv_time: double
      src_host_id: HOST_ID
      src_mod_id: MODULE_ID
      dest_host_id: HOST_ID
      dest_mod_id: MODULE_ID
      num_data_bytes: int32
      remaining_bytes: int32
      is_dynamic: int32
      reserved: uint32

message_defs:
  EXIT:
    id: 0
    fields: null

  KILL:
    id: 1
    fields: null

  ACKNOWLEDGE:
    id: 2
    fields: null

  CONNECT_V2:
    id: 4
    fields:
      logger_status: int16
      daemon_status: int16
      allow_multiple: int16
      mod_id: MODULE_ID # int16
      pid: int32
      name: char[MAX_NAME_LEN] # char[32]

  FAIL_SUBSCRIBE:
    id: 6
    fields:
      mod_id: MODULE_ID
      reserved: int16
      msg_type: MSG_TYPE

  FAILED_MESSAGE:
    id: 8
    fields:
      dest_mod_id: MODULE_ID
      reserved: int16[3]
      time_of_failure: double
      msg_header: RTMA_MSG_HEADER

  CONNECT:
    id: 13
    fields:
      logger_status: int16
      daemon_status: int16

  DISCONNECT:
    id: 14
    fields: null

  SUBSCRIBE:
    id: 15
    fields:
      msg_type: MSG_TYPE

  UNSUBSCRIBE:
    id: 16
    fields:
      msg_type: MSG_TYPE

  MODULE_READY:
    id: 26
    fields:
      pid: int32

  MESSAGE_TRAFFIC:
    id: 30
    fields:
      seqno: uint32
      sub_seqno: uint32
      start_timestamp: double
      end_timestamp: double
      msg_type: MSG_TYPE[MESSAGE_TRAFFIC_SIZE]
      msg_count: uint16[MESSAGE_TRAFFIC_SIZE]

  ACTIVE_CLIENTS:
    id: 31
    fields:
      timestamp: double
      num_clients: int16
      padding: int16
      reserved: int32
      client_mod_id: MODULE_ID[MAX_ACTIVE_CLIENTS]
      client_pid: int32[MAX_ACTIVE_CLIENTS]
    
  CLIENT_INFO:
    id: 32
    fields:
      addr: char[32]
      uid: int32
      pid: int32
      mod_id: MODULE_ID
      is_logger: int16
      is_unique: int16
      port: uint16
      name: char[MAX_NAME_LEN]

  CLIENT_CLOSED:
    id: 33
    fields:
      addr: char[32]
      uid: int32
      pid: int32
      mod_id: MODULE_ID
      is_logger: int16
      is_unique: int16
      port: uint16
      name: char[MAX_NAME_LEN]

  CLIENT_SET_NAME:
    id: 34
    fields:
      name: char[MAX_NAME_LEN]

  RTMA_LOG:
    id: 40
    fields: # based on python LogRecord
      time: double # time of log, from time.time() (unix time)
      level: int32 # 0 NOTSET, 10 DEBUG, 20 INFO, 30 WARNING, 40 ERROR, 50 CRITICAL
      lineno: int32 # source code line number where message was logged
      name: char[128] # name of the logger or module
      pathname: char[512] # name of source file
      funcname: char[256] # name of function making log
      message: char[MAX_LOG_LENGTH] # formatted message

  RTMA_LOG_CRITICAL:
    id: 41
    fields: # based on python LogRecord
      time: double # time of log, from time.time() (unix time)
      level: int32 # 0 NOTSET, 10 DEBUG, 20 INFO, 30 WARNING, 40 ERROR, 50 CRITICAL
      lineno: int32 # source code line number where message was logged
      name: char[128] # name of the logger or module
      pathname: char[512] # name of source file
      funcname: char[256] # name of function making log
      message: char[MAX_LOG_LENGTH] # formatted message

  RTMA_LOG_ERROR:
    id: 42
    fields: # based on python LogRecord
      time: double # time of log, from time.time() (unix time)
      level: int32 # 0 NOTSET, 10 DEBUG, 20 INFO, 30 WARNING, 40 ERROR, 50 CRITICAL
      lineno: int32 # source code line number where message was logged
      name: char[128] # name of the logger or module
      pathname: char[512] # name of source file
      funcname: char[256] # name of function making log
      message: char[MAX_LOG_LENGTH] # formatted message

  RTMA_LOG_WARNING:
    id: 43
    fields: # based on python LogRecord
      time: double # time of log, from time.time() (unix time)
      level: int32 # 0 NOTSET, 10 DEBUG, 20 INFO, 30 WARNING, 40 ERROR, 50 CRITICAL
      lineno: int32 # source code line number where message was logged
      name: char[128] # name of the logger or module
      pathname: char[512] # name of source file
      funcname: char[256] # name of function making log
      message: char[MAX_LOG_LENGTH] # formatted message

  RTMA_LOG_INFO:
    id: 44
    fields: # based on python LogRecord
      time: double # time of log, from time.time() (unix time)
      level: int32 # 0 NOTSET, 10 DEBUG, 20 INFO, 30 WARNING, 40 ERROR, 50 CRITICAL
      lineno: int32 # source code line number where message was logged
      name: char[128] # name of the logger or module
      pathname: char[512] # name of source file
      funcname: char[256] # name of function making log
      message: char[MAX_LOG_LENGTH] # formatted message

  RTMA_LOG_DEBUG:
    id: 45
    fields: # based on python LogRecord
      time: double # time of log, from time.time() (unix time)
      level: int32 # 0 NOTSET, 10 DEBUG, 20 INFO, 30 WARNING, 40 ERROR, 50 CRITICAL
      lineno: int32 # source code line number where message was logged
      name: char[128] # name of the logger or module
      pathname: char[512] # name of source file
      funcname: char[256] # name of function making log
      message: char[MAX_LOG_LENGTH] # formatted message

  TIMING_MESSAGE:
    id: 80
    fields:
      timing: uint16[MAX_MESSAGE_TYPES]
      ModulePID: int32[MAX_MODULES]
      send_time: double

  FORCE_DISCONNECT:
    id: 82
    fields:
      mod_id: int32

  PAUSE_SUBSCRIPTION:
    id: 85
    fields:
      msg_type: MSG_TYPE

  RESUME_SUBSCRIPTION:
    id: 86
    fields:
      msg_type: MSG_TYPE