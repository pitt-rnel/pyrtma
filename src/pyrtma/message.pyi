from __future__ import annotations
import json
import ctypes
from typing import Type, Any, ClassVar, Dict
from dataclasses import dataclass

msg_defs: Dict[int, Type[MessageData]]

class RTMAMessageError(Exception): ...
class UnknownMessageType(RTMAMessageError): ...
class JSONDecodingError(RTMAMessageError): ...
class InvalidMessageDefinition(RTMAMessageError): ...

def message_def(msg_cls: Type[MessageData], *args, **kwargs) -> Type[MessageData]: ...

msg_def = message_def

class _RTMA_MSG_HEADER(ctypes.Structure):
    msg_type: int
    msg_count: int
    send_time: float
    recv_time: float
    src_host_id: int
    src_mod_id: int
    dest_host_id: int
    dest_mod_id: int
    num_data_bytes: int
    remaining_bytes: int
    is_dynamic: int
    reserved: int

class MessageHeader(_RTMA_MSG_HEADER):
    @property
    def size(self) -> int: ...
    @property
    def buffer(self) -> memoryview: ...
    @property
    def version(self) -> int: ...
    @version.setter
    def version(self, value: int): ...
    def pretty_print(self, add_tabs=0) -> str: ...
    def hexdump(self, length=16, sep=" "): ...
    @property
    def get_data(self) -> Type[MessageData]: ...
    def to_json(self, minify: bool = False, **kwargs) -> str: ...
    @classmethod
    def from_dict(cls, data) -> MessageHeader: ...
    @classmethod
    def from_json(cls, s) -> MessageHeader: ...

class TimeCodeMessageHeader(MessageHeader):
    utc_seconds: int
    utc_fraction: int

def get_header_cls(timecode: bool = False) -> Type[MessageHeader]: ...
def _create_ftype_map(obj: MessageData): ...

class MessageData(ctypes.Structure):
    type_id: ClassVar[int]
    type_name: ClassVar[str]
    type_hash: ClassVar[int]
    type_source: ClassVar[str]
    type_def: ClassVar[str]

    @classmethod
    def from_random(cls) -> MessageData: ...
    @classmethod
    def from_buffer(cls, source, offset=0) -> MessageData: ...
    @classmethod
    def from_buffer_copy(cls, source, offset=0) -> MessageData: ...
    @property
    def type_size(self) -> int: ...
    def pretty_print(self, add_tabs=0) -> str: ...
    def hexdump(self, length=16, sep=" "): ...
    def get_field_raw(self, name: str) -> bytes: ...
    def to_json(self, minify: bool = False, **kwargs) -> str: ...

@dataclass
class Message:
    header: MessageHeader
    data: MessageData
    @property
    def type_id(self) -> int: ...
    @property
    def name(self) -> str: ...
    def pretty_print(self, add_tabs: int = 0) -> str: ...
    def to_json(self, minify: bool = False, **kwargs) -> str: ...
    @classmethod
    def from_json(cls, s: str) -> Message: ...
